using Model;
using RestSharp;
using System.Collections.Generic;
using System.Configuration;
using Newtonsoft.Json;
using System.Net;
using System.IO;

namespace DataLayer
{
    public class UcastnikRepository //TODO Refactor and incorrect response (insert failed, object wasnt found etc)
    {
        private string _resource = "ucastniks";
        private IRestClient _client;

        public string Url { get; set; }

        private string Resource
        {
            get { return _resource; }
            set { _resource = value; }
        }
       
        private IRestClient Client 
        {
            get { return _client; }
            set { _client = value; }
        }
       
        public UcastnikRepository()
        {
            Url = ConfigurationManager.AppSettings["BayUrl"];
            Client = new RestClient(Url); //TODO Later introduce some solid dependency injection
        }

        public UcastnikRepository(IRestClient client)
        {
            Client = client;
        }

        public Ucastnik GetById(int id) 
        {
            var req = new RestRequest(Resource  + "/{id}", Method.GET);
            req.RequestFormat = DataFormat.Json;
            req.AddUrlSegment("id",id.ToString());

            var res = Client.Execute<Ucastnik>(req);
            
            return res.Data;
        }

        public List<Ucastnik> GetAll()
        {

            var req = new RestRequest(Resource , Method.GET);
            req.RequestFormat = DataFormat.Json;
            
            var res = Client.Execute<List<Ucastnik>>(req);
      
            return res.Data;
        }

        public Ucastnik Add(Ucastnik ucastnik) //TODO send commit parameter and send it with root (although root is generated by page, maybe i shouldnt send it, check rails api)
        {
          var req = new RestRequest(Resource, Method.POST);
          req.RequestFormat = DataFormat.Json;

          var set = new JsonSerializerSettings()
          {
                NullValueHandling = NullValueHandling.Ignore,
          };
          var json = JsonConvert.SerializeObject(ucastnik, set);
          req.RootElement = "ucastnik";
          req.AddParameter("application/json", json, ParameterType.RequestBody);

          var res = Client.Execute<Ucastnik>(req);
          return res.Data;
        }
    }
}
